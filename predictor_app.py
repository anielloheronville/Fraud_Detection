# -*- coding: utf-8 -*-
"""predictor_app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VWOUglJ68nZ2xiywzZ3-t9L4M2uozlIq
"""

# predictor_app.py
import streamlit as st
import pandas as pd
import joblib
import shap
import matplotlib.pyplot as plt

# =============================================================================
# Carregamento dos Artefatos (Modelo, Scaler, Features)
# =============================================================================
try:
    model = joblib.load('/content/drive/MyDrive/Projetos/DetecaÃÉo Fraude/model_xgboost.joblib')
    scaler = joblib.load('/content/drive/MyDrive/Projetos/DetecaÃÉo Fraude/scaler.joblib')
    features_modelo = joblib.load('/content/drive/MyDrive/Projetos/DetecaÃÉo Fraude/features_modelo.joblib')
    ui_features_info = joblib.load('/content/drive/MyDrive/Projetos/DetecaÃÉo Fraude/ui_features_info.joblib')
except FileNotFoundError:
    st.error("Arquivos de modelo, scaler ou features n√£o encontrados. Por favor, execute o 'final_training_script.py' primeiro.")
    st.stop()

# Criar o explainer do SHAP (fazemos isso uma vez para otimizar)
explainer = shap.TreeExplainer(model)

# =============================================================================
# Interface do Usu√°rio (UI) com Streamlit
# =============================================================================
st.set_page_config(layout="wide", page_title="Analisador de Fraude")
st.title("Analisador de Fraude em Transa√ß√µes Financeiras ü§ñ")
st.write("Esta ferramenta utiliza um modelo de Machine Learning (XGBoost) para prever a probabilidade de uma transa√ß√£o ser fraudulenta. Insira os dados da transa√ß√£o na barra lateral para obter uma an√°lise em tempo real.")

# --- Barra Lateral para Inser√ß√£o de Dados ---
st.sidebar.header("Dados da Nova Transa√ß√£o")

# Dicion√°rio para armazenar os inputs do usu√°rio
user_inputs = {}

# Inputs para Time e Amount
user_inputs['Time'] = st.sidebar.number_input(
    'Tempo (em segundos desde a primeira transa√ß√£o)',
    min_value=float(ui_features_info['Time']['min']),
    max_value=float(ui_features_info['Time']['max']),
    value=float(ui_features_info['Time']['min']) # Valor padr√£o
)
user_inputs['Amount'] = st.sidebar.number_input(
    'Valor da Transa√ß√£o (Amount)',
    min_value=float(ui_features_info['Amount']['min']),
    value=100.0, # Valor padr√£o
    format="%.2f"
)

# Inputs para as features V1-V28 usando sliders
st.sidebar.subheader("Features An√¥nimas (V1-V28)")
for feature in features_modelo:
    if feature.startswith('V'):
        info = ui_features_info[feature]
        user_inputs[feature] = st.sidebar.slider(
            feature,
            min_value=float(info['min']),
            max_value=float(info['max']),
            value=0.0 # Valor padr√£o no meio
        )

# Bot√£o para realizar a predi√ß√£o
if st.sidebar.button("Analisar Transa√ß√£o"):
    # --- Processamento e Predi√ß√£o ---
    # 1. Criar DataFrame com os dados do usu√°rio
    input_df = pd.DataFrame([user_inputs])

    # 2. Escalar 'Time' e 'Amount' com o scaler carregado
    input_df[['Amount_Scaled', 'Time_Scaled']] = scaler.transform(input_df[['Amount', 'Time']])

    # 3. Garantir a ordem correta das colunas
    input_df_modelo = input_df[features_modelo]

    # 4. Fazer a predi√ß√£o de probabilidade
    prediction_proba = model.predict_proba(input_df_modelo)[0]
    prob_fraude = prediction_proba[1] # Probabilidade da classe 1 (fraude)

    # --- Exibi√ß√£o dos Resultados ---
    st.header("Resultado da An√°lise")

    col1, col2 = st.columns(2)

    with col1:
        if prob_fraude > 0.5: # Limiar de decis√£o
            st.error("ALERTA: Transa√ß√£o Classificada como FRAUDE!")
        else:
            st.success("Transa√ß√£o Classificada como NORMAL.")

    with col2:
        st.metric(label="Probabilidade de ser Fraude", value=f"{prob_fraude:.2%}")

    # --- Explica√ß√£o com SHAP ---
    st.header("Justificativa da Previs√£o (An√°lise SHAP)")
    st.write("Este gr√°fico mostra quais fatores mais contribu√≠ram para a decis√£o do modelo. Fatores em vermelho aumentam a chance de fraude, enquanto fatores em azul diminuem.")

    # Calcular SHAP values para a √∫nica inst√¢ncia
    shap_values = explainer.shap_values(input_df_modelo)

    # Gerar o gr√°fico de for√ßas
    fig, ax = plt.subplots()
    shap.force_plot(
        explainer.expected_value,
        shap_values[0,:],
        input_df_modelo.iloc[0,:],
        matplotlib=True,
        show=False,
        text_rotation=15
    )
    st.pyplot(fig, bbox_inches='tight')
    st.info("O **'base value'** √© a probabilidade m√©dia de fraude em todo o dataset. As setas mostram como cada feature da transa√ß√£o atual empurra essa probabilidade para o valor final da previs√£o **('output value')**.")

else:
    st.info("Por favor, insira os dados da transa√ß√£o na barra lateral e clique em 'Analisar Transa√ß√£o'.")